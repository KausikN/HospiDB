
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.table.DefaultTableModel;
import java.time.LocalDate;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Kausik N
 */
public class AppointmentPage extends javax.swing.JFrame {

    /**
     * Creates new form LoginPage
     */
    public AppointmentPage() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        l_t = new javax.swing.JLabel();
        l_n1 = new javax.swing.JLabel();
        l_ID = new javax.swing.JLabel();
        l_Username = new javax.swing.JLabel();
        nav = new javax.swing.JPanel();
        view_button = new javax.swing.JButton();
        account_button = new javax.swing.JButton();
        update_button = new javax.swing.JButton();
        add_delete_button = new javax.swing.JButton();
        back = new javax.swing.JButton();
        backhome = new javax.swing.JButton();
        appointment_button = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        t1 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        checkbox = new javax.swing.JCheckBox();
        column_dropdown = new javax.swing.JComboBox<>();
        value_text = new javax.swing.JTextField();
        l_n2 = new javax.swing.JLabel();
        l_n3 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        day_dropdown = new javax.swing.JComboBox<>();
        time_dropdown_h = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        time_dropdown_m = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(0, 72, 124));
        jPanel1.setLayout(null);

        l_t.setFont(new java.awt.Font("Century Gothic", 1, 88)); // NOI18N
        l_t.setForeground(new java.awt.Color(255, 255, 255));
        l_t.setText("Book Appointment");
        jPanel1.add(l_t);
        l_t.setBounds(320, 10, 810, 109);

        l_n1.setFont(new java.awt.Font("SansSerif", 0, 24)); // NOI18N
        l_n1.setForeground(new java.awt.Color(237, 234, 234));
        l_n1.setText("Select Timings");
        jPanel1.add(l_n1);
        l_n1.setBounds(260, 460, 170, 30);

        l_ID.setFont(new java.awt.Font("SansSerif", 0, 24)); // NOI18N
        l_ID.setForeground(new java.awt.Color(237, 234, 234));
        l_ID.setText("Id");
        jPanel1.add(l_ID);
        l_ID.setBounds(260, 160, 230, 30);

        l_Username.setFont(new java.awt.Font("SansSerif", 0, 24)); // NOI18N
        l_Username.setForeground(new java.awt.Color(237, 234, 234));
        jPanel1.add(l_Username);
        l_Username.setBounds(350, 120, 230, 30);

        view_button.setBackground(new java.awt.Color(5, 32, 74));
        view_button.setFont(new java.awt.Font("Calibri", 1, 22)); // NOI18N
        view_button.setForeground(new java.awt.Color(237, 234, 234));
        view_button.setText("VIEW");
        view_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                view_buttonActionPerformed(evt);
            }
        });

        account_button.setBackground(new java.awt.Color(5, 32, 74));
        account_button.setFont(new java.awt.Font("Calibri", 1, 22)); // NOI18N
        account_button.setForeground(new java.awt.Color(237, 234, 234));
        account_button.setText("ACCOUNT");
        account_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                account_buttonActionPerformed(evt);
            }
        });

        update_button.setBackground(new java.awt.Color(5, 32, 74));
        update_button.setFont(new java.awt.Font("Calibri", 1, 22)); // NOI18N
        update_button.setForeground(new java.awt.Color(237, 234, 234));
        update_button.setText("UPDATE");
        update_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                update_buttonActionPerformed(evt);
            }
        });

        add_delete_button.setBackground(new java.awt.Color(5, 32, 74));
        add_delete_button.setFont(new java.awt.Font("Calibri", 1, 22)); // NOI18N
        add_delete_button.setForeground(new java.awt.Color(237, 234, 234));
        add_delete_button.setText("INSERT/DELETE");
        add_delete_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_delete_buttonActionPerformed(evt);
            }
        });

        back.setBackground(new java.awt.Color(5, 32, 74));
        back.setFont(new java.awt.Font("Calibri", 1, 22)); // NOI18N
        back.setForeground(new java.awt.Color(237, 234, 234));
        back.setText("SIGN OUT");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        backhome.setBackground(new java.awt.Color(5, 32, 74));
        backhome.setFont(new java.awt.Font("Calibri", 1, 22)); // NOI18N
        backhome.setForeground(new java.awt.Color(237, 234, 234));
        backhome.setText("BACK");
        backhome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backhomeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout navLayout = new javax.swing.GroupLayout(nav);
        nav.setLayout(navLayout);
        navLayout.setHorizontalGroup(
            navLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(view_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(add_delete_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(update_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(account_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(back, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(backhome, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        navLayout.setVerticalGroup(
            navLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(navLayout.createSequentialGroup()
                .addComponent(account_button, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(view_button, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(add_delete_button, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(update_button, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 238, Short.MAX_VALUE)
                .addComponent(backhome, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(back, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );

        jPanel1.add(nav);
        nav.setBounds(0, 0, 220, 800);

        appointment_button.setBackground(new java.awt.Color(0, 255, 255));
        appointment_button.setFont(new java.awt.Font("Calibri", 0, 25)); // NOI18N
        appointment_button.setForeground(new java.awt.Color(0, 51, 204));
        appointment_button.setText("Book Appointment");
        appointment_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appointment_buttonActionPerformed(evt);
            }
        });
        jPanel1.add(appointment_button);
        appointment_button.setBounds(560, 730, 320, 50);

        t1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(t1);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(510, 250, 670, 190);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Conditions"));

        checkbox.setForeground(new java.awt.Color(255, 0, 0));
        checkbox.setText("Constraints?");
        checkbox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkboxItemStateChanged(evt);
            }
        });

        column_dropdown.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                column_dropdownItemStateChanged(evt);
            }
        });

        value_text.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                value_textActionPerformed(evt);
            }
        });
        value_text.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                value_textKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(checkbox, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 108, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(value_text)
                    .addComponent(column_dropdown, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(checkbox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(column_dropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(value_text, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel2);
        jPanel2.setBounds(260, 250, 220, 190);

        l_n2.setFont(new java.awt.Font("SansSerif", 0, 24)); // NOI18N
        l_n2.setForeground(new java.awt.Color(237, 234, 234));
        l_n2.setText("Hello");
        jPanel1.add(l_n2);
        l_n2.setBounds(260, 120, 90, 30);

        l_n3.setFont(new java.awt.Font("SansSerif", 0, 24)); // NOI18N
        l_n3.setForeground(new java.awt.Color(237, 234, 234));
        l_n3.setText("Select Doctor");
        jPanel1.add(l_n3);
        l_n3.setBounds(260, 200, 160, 30);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Date");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("Time");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(263, 263, 263)
                        .addComponent(day_dropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(302, 302, 302)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(112, 112, 112)
                        .addComponent(time_dropdown_h, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(time_dropdown_m, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(140, 140, 140)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(258, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(day_dropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(time_dropdown_h, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(time_dropdown_m, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(75, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel3);
        jPanel3.setBounds(260, 520, 900, 190);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1250, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
String Table = "Doctors";
String Username;
String Password;
String Id;
String Category;
String Choice;

int Constrain;
String[] columns_in_table = new String[20];
int columns_in_table_size = 0;
String Column;

int MAX_DAYS_BEFORE_APPOINTMENT = 14;

String[] viewable_tables = new String[10];
int viewable_tables_size = 0;
String[] updatable_tables = new String[10];
int updatable_tables_size = 0;
String[] deletable_tables = new String[10];
int deletable_tables_size = 0;

void MySQLConnector_GetUser(){
    try {
    Class.forName("java.sql.Driver");
    Connection con = DriverManager.getConnection("jdbc:mysql://localhost/Hospital","root","mysql");
    String s1="select Username, Password, Id, Category from LoginDetails where LoggedIn = 1;";
    Statement st1 = con.createStatement();
    ResultSet rs = st1.executeQuery(s1);
    int rs_size = 0;
    while(rs.next()){
        Username = rs.getString("Username");
        Password = rs.getString("Password");
        Id = rs.getString("Id");
        Category = rs.getString("Category");
        
        rs_size++;
    }
    
    if(rs_size != 1){
        System.out.println("ERROR: Multiple LoggedIn users.");
    }
    
    rs.close();
    con.close();
    }
    catch(ClassNotFoundException | SQLException e){
        System.out.println(e.getMessage());
    }
}

void MySQLConnector_GetColumns(){
    try {
    Class.forName("java.sql.Driver");
    Connection con = DriverManager.getConnection("jdbc:mysql://localhost/Hospital","root","mysql");
    String s1="show columns from "+Table+";";
    Statement st1 = con.createStatement();
    ResultSet rs = st1.executeQuery(s1);
    int rs_size = 0;
    while(rs.next()){
        columns_in_table[rs_size] = rs.getString("Field");
        
        rs_size++;
    }
    columns_in_table_size = rs_size;
    rs.close();
    con.close();
    }
    catch(ClassNotFoundException | SQLException e){
        System.out.println(e.getMessage());
    }
}

void InitTable(){
    DefaultTableModel dtm = (DefaultTableModel)t1.getModel();
    dtm.setColumnCount(0);
    dtm.setRowCount(0);
    for(int i=0;i<columns_in_table_size;i++){
        dtm.addColumn(columns_in_table[i]);
    }
}

void UpdateTable(int condition, String value){
    try {
    Class.forName("java.sql.Driver");
    Connection con = DriverManager.getConnection("jdbc:mysql://localhost/Hospital","root","mysql");
    String s1 = "select * from "+Table+"";
    if(condition == 1){
        s1 = "select * from "+Table+" where "+Column+" = "+value+"";
    }
    
    Statement st1 = con.createStatement();
    s1 = s1+";";System.out.println(s1);
    ResultSet rs = st1.executeQuery(s1);
    int rs_size = 0;
    while(rs.next()){
        Object[] row = new Object[columns_in_table_size];
        for(int i=0;i<columns_in_table_size;i++){
            row[i] = rs.getObject(columns_in_table[i]);
            if(row[i] == null){
                System.out.println("null present.");
                row[i] = "";
            }
        }
        DefaultTableModel dtm = (DefaultTableModel)t1.getModel();
        dtm.addRow(row);
        
        rs_size++;
    }
    rs.close();
    con.close();
    RowSizeFitter();
    }
    catch(ClassNotFoundException | SQLException e){
        System.out.println(e.getMessage());
    }
}

void RowSizeFitter(){
    System.out.println(t1.getSize().height);
    if(t1.getRowCount()>0){
        int row_height = (280/t1.getRowCount());
        t1.setRowHeight(row_height);
    }
}

void EnterTimeValues_to_Dropdown(){
    String s;
    for(int i=0;i<24;i++){
        if(i<10)s = "0"+i;
        else s = i+"";
        time_dropdown_h.addItem(s);
    }
    for(int i=0;i<60;i++){
        if(i<10)s = "0"+i;
        else s = i+"";
        time_dropdown_m.addItem(s);
    }
    
    LocalDate localDate = LocalDate.now();
    String date = localDate.toString();System.out.println(date);
    int year = Integer.parseInt(date.substring(0, 4));
    int month = Integer.parseInt(date.substring(5, 7));
    int day = Integer.parseInt(date.substring(8, 10));
    
    for(int i=0;i<MAX_DAYS_BEFORE_APPOINTMENT;i++){
        String date_to_enter;
        int month_check = 0;
        if(month == 2)month_check = 1;
        else if((month%2 == 0 && month < 7)||(month%2 == 1 && month > 7))month_check = 2;
        int leap_year_check = 0;
        if(year%4 == 0)leap_year_check = 1;
        int new_month = month;
        int new_year = year;
        int new_day = day+i+1;
        
        if(new_day > 31 && month_check == 0){
            new_day = 1;
            new_month = new_month+1;
        }
        else if(new_day > 30 && month_check == 2){
            new_day = 1;
            new_month = new_month+1;
        }
        else if(new_day > 28+leap_year_check && month_check == 1){
            new_day = 1;
            new_month = new_month+1;
        }
        
        if(new_month > 12){
            new_year = new_year+1;
            new_month = 1;
        }
        date_to_enter = new_day+"-"+new_month+"-"+new_year;
        if(new_day < 10)date_to_enter = "0"+new_day+"-";
        else date_to_enter = new_day+"-";
        if(new_month < 10)date_to_enter = date_to_enter + "0" + new_month + "-";
        else date_to_enter = date_to_enter + new_month + "-";
        if(new_year < 10)date_to_enter = date_to_enter + "0" + new_year;
        else date_to_enter = date_to_enter + new_year;
        day_dropdown.addItem(date_to_enter);
    }
}

void MySQLConnector_AddAppointment(){

    String userId = Id;
    String doctorId = t1.getValueAt(t1.getSelectedRow(), 0).toString();
    String date = day_dropdown.getSelectedItem().toString();
    date = (date.substring(6, 10)) + "-" + ((date.substring(3, 5)) + "-" + date.substring(0, 2));
    String timing = time_dropdown_h.getSelectedItem().toString() + ":" + time_dropdown_m.getSelectedItem().toString();
    
    try {
    Class.forName("java.sql.Driver");
    Connection con = DriverManager.getConnection("jdbc:mysql://localhost/Hospital","root","mysql");
    String s;
    Statement st1 = con.createStatement();
    s = "insert into Appointments values('"+userId+"', '"+doctorId+"', '"+date+"', '"+timing+"');";
    System.out.println(s);
    st1.executeUpdate(s);
    
    con.close();
    JOptionPane.showMessageDialog(this,"Appointment Booking Successful.");
    }
    catch(ClassNotFoundException | SQLException e){
        System.out.println(e.getMessage());
        JOptionPane.showMessageDialog(this,"Appointment Booking Failed.");
    }
}

int SQLInjectionCheck(String s){
    int check = 1;
    for(int i=0;i<s.length();i++){
        String s_temp = s.charAt(i)+"";
        if(s_temp.equals("'"))check =0;
    }
    return check;
}



    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
MySQLConnector_GetUser();
EnterTimeValues_to_Dropdown();
l_Username.setText(Username+"!");
l_ID.setText("ID - "+Id);

if(viewable_tables_size == 0){
    view_button.setVisible(false);
}
if(updatable_tables_size == 0){
    update_button.setVisible(false);
}
if(deletable_tables_size == 0){
    add_delete_button.setVisible(false);
}

appointment_button.setVisible(false);
if(Category.equals("Patient")){
    appointment_button.setVisible(true);
}

column_dropdown.removeAllItems();
MySQLConnector_GetColumns();
for(int i=0;i<columns_in_table_size;i++){
    column_dropdown.addItem(columns_in_table[i]);
}

int column_index = 0;
Column = column_dropdown.getItemAt(column_index);

column_dropdown.setEnabled(false);
value_text.setEnabled(false);


InitTable();
UpdateTable(0, "");
    }//GEN-LAST:event_formWindowOpened

    private void view_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_view_buttonActionPerformed
Table_View h = new Table_View();
AppointmentPage.this.setVisible(false);
h.setVisible(true);
    }//GEN-LAST:event_view_buttonActionPerformed

    private void account_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_account_buttonActionPerformed
AccountDetailsPage h = new AccountDetailsPage();
AppointmentPage.this.setVisible(false);
h.setVisible(true);
    }//GEN-LAST:event_account_buttonActionPerformed

    private void update_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_update_buttonActionPerformed
Table_UpdatePageHome h = new Table_UpdatePageHome();
AppointmentPage.this.setVisible(false);
h.setVisible(true);
    }//GEN-LAST:event_update_buttonActionPerformed

    private void add_delete_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_delete_buttonActionPerformed
Table_InsertDeleteHome h = new Table_InsertDeleteHome();
AppointmentPage.this.setVisible(false);
h.setVisible(true);
    }//GEN-LAST:event_add_delete_buttonActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
LoginPage h = new LoginPage();
AppointmentPage.this.setVisible(false);
h.setVisible(true);
    }//GEN-LAST:event_backActionPerformed

    private void appointment_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appointment_buttonActionPerformed
MySQLConnector_AddAppointment();
    }//GEN-LAST:event_appointment_buttonActionPerformed

    private void backhomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backhomeActionPerformed
HomePage h = new HomePage();
AppointmentPage.this.setVisible(false);
h.setVisible(true);
    }//GEN-LAST:event_backhomeActionPerformed

    private void checkboxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkboxItemStateChanged
        if(checkbox.isSelected() == true){
            column_dropdown.setEnabled(true);
            value_text.setEnabled(true);
            Constrain = 1;
        }
        else if(checkbox.isSelected() == false){
            column_dropdown.setEnabled(false);
            value_text.setEnabled(false);
            Constrain = 0;
        }

        DefaultTableModel dtm = (DefaultTableModel)t1.getModel();
        dtm.setColumnCount(0);
        dtm.setRowCount(0);
        InitTable();
        if(checkbox.isSelected() == true){
            Constrain = 1;
            Column = column_dropdown.getItemAt(column_dropdown.getSelectedIndex());
            String val = value_text.getText();
            if(SQLInjectionCheck(val) == 1){
                val = "'"+val+"'";
                if(val.equals("''") || val.equals(""))Constrain=0;
                UpdateTable(Constrain, val);
            }
            else {
                JOptionPane.showMessageDialog(this, "Please enter valid input.");
                value_text.setText("");
                UpdateTable(Constrain, "");
            }
        }
        else if(checkbox.isSelected() == false){
            Constrain = 0;
            UpdateTable(Constrain, "");
        }
    }//GEN-LAST:event_checkboxItemStateChanged

    private void column_dropdownItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_column_dropdownItemStateChanged
        int column_index = column_dropdown.getSelectedIndex();
        Column = column_dropdown.getItemAt(column_index);
    }//GEN-LAST:event_column_dropdownItemStateChanged

    private void value_textActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_value_textActionPerformed

    }//GEN-LAST:event_value_textActionPerformed

    private void value_textKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_value_textKeyReleased
        DefaultTableModel dtm = (DefaultTableModel)t1.getModel();
        dtm.setColumnCount(0);
        dtm.setRowCount(0);
        InitTable();
        if(checkbox.isSelected() == true){
            Constrain = 1;
            Column = column_dropdown.getItemAt(column_dropdown.getSelectedIndex());
            String val = value_text.getText();
            if(SQLInjectionCheck(val) == 1){
                val = "'"+val+"'";
                if(val.equals("''") || val.equals(""))Constrain=0;
                UpdateTable(Constrain, val);
            }
            else {
                JOptionPane.showMessageDialog(this, "Please enter valid input.");
                value_text.setText("");
                UpdateTable(Constrain, "");
            }
        }
        else if(checkbox.isSelected() == false){
            Constrain = 0;
            UpdateTable(Constrain, "");
        }
    }//GEN-LAST:event_value_textKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoginPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoginPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoginPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoginPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LoginPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton account_button;
    private javax.swing.JButton add_delete_button;
    private javax.swing.JButton appointment_button;
    private javax.swing.JButton back;
    private javax.swing.JButton backhome;
    private javax.swing.JCheckBox checkbox;
    private javax.swing.JComboBox<String> column_dropdown;
    private javax.swing.JComboBox<String> day_dropdown;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel l_ID;
    private javax.swing.JLabel l_Username;
    private javax.swing.JLabel l_n1;
    private javax.swing.JLabel l_n2;
    private javax.swing.JLabel l_n3;
    private javax.swing.JLabel l_t;
    private javax.swing.JPanel nav;
    private javax.swing.JTable t1;
    private javax.swing.JComboBox<String> time_dropdown_h;
    private javax.swing.JComboBox<String> time_dropdown_m;
    private javax.swing.JButton update_button;
    private javax.swing.JTextField value_text;
    private javax.swing.JButton view_button;
    // End of variables declaration//GEN-END:variables
}
